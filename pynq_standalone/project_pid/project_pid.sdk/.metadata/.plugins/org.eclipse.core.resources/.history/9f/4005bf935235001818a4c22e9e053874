/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "xparameters.h"

#include "xscugic.h"
#include "my_mac_driver.h"

XScuGic ScuGic;
unsigned char MySendbuf[1500];  //All Ethernet

int hls_PID_init(XPid_regulator *hls_Ptr_pid)
{
	XPid_regulator_Config *cfg_Ptr_pid;
   int status;

   cfg_Ptr_pid = XPid_regulator_LookupConfig(XPAR_PID_REGULATOR_0_DEVICE_ID);
   if (!cfg_Ptr_pid) {
      print("ERROR: Lookup of PID accelerator configuration failed.\n\r");
      return XST_FAILURE;
   }
   status = XPid_regulator_CfgInitialize(hls_Ptr_pid, cfg_Ptr_pid);
   if (status != XST_SUCCESS) {
      print("ERROR: Could not initialize PID accelerator.\n\r");
      return XST_FAILURE;
   }

   return status;
}

/*void hls_pid_return_isr(void *InstancePtr)
{
		XPid_regulator *pAccelerator = (XPid_regulator *)InstancePtr;

	   // clear the local interrupt
		XPid_regulator_InterruptClear(pAccelerator,1);
		print("ResultAvailHls_PID = 1\n\r");
		ResultAvailHls_PID = 1;
}
*/
/*int setup_interrupt()
{
	   //This functions sets up the interrupt on the ARM
	   int result;
	   XScuGic_Config *pCfg = XScuGic_LookupConfig(XPAR_SCUGIC_0_DEVICE_ID);
	   if (pCfg == NULL){
	      print("Interrupt Configuration Lookup Failed\n\r");
	      return XST_FAILURE;
	   }
	   result = XScuGic_CfgInitialize(&ScuGic,pCfg,pCfg->CpuBaseAddress);
	   if(result != XST_SUCCESS){
	      return result;
	   }
	   // self test
	   result = XScuGic_SelfTest(&ScuGic);
	   if(result != XST_SUCCESS){
	      return result;
	   }
	   // Initialize the exception handler
	   Xil_ExceptionInit();
	   // Register the exception handler
	   Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,(Xil_ExceptionHandler)XScuGic_InterruptHandler,&ScuGic);
	   //Enable the exception handler
	   Xil_ExceptionEnable();
	   // Connect the Left FIR ISR to the exception table
	   result = XScuGic_Connect(&ScuGic,XPAR_FABRIC_PID_REGULATOR_0_INTERRUPT_INTR,(Xil_InterruptHandler)hls_pid_return_isr ,&Hls_pid);
	   if(result != XST_SUCCESS){
	      return result;
	   }
	   // Enable the Left FIR ISR
	   XScuGic_Enable(&ScuGic,XPAR_FABRIC_PID_REGULATOR_0_INTERRUPT_INTR);

	   return XST_SUCCESS;
}
*/
void pid_input(void)
{

	float Ref,Fdb;

//	while (1)
//	{

		Ref = 7.3;
		Fdb = 5.2;

		//cast float "Ref" and "Fdb" to typr u32
		XPid_regulator_Set_Ref(&Hls_pid, *((u32*)&Ref));
		XPid_regulator_Set_Fdb(&Hls_pid, *((u32*)&Fdb));

		// Clear done flags
		ResultAvailHls_PID = 0;

		// issue start
		XPid_regulator_Start(&Hls_pid);
		//printf("HLS is starting \n\r");
		// wait for done interrupt on each channel and then read the corresponding output sample
		//while(!ResultAvailHls_PID);

//	}
}
void Prepare_send_packet(float Return_real)
{
	int datalen=0;
	DATA_SEND *data_send;        //Payload of Ethernet
	strcpy(data_send->data_1,"I am zynq");
	strcpy(data_send->data_2,"Who are you?");
	strcpy(data_send->data_3,"How are you?");
	data_send->data_4 = 666;
	data_send->data_5 = Return_real;
    datalen = sizeof(DATA_SEND)/sizeof(unsigned char);
    printf("datalen = %d\n",datalen);

	memcpy (MySendbuf, dst_mac, 6);
	memcpy (MySendbuf + 6, src_mac, 6);

	MySendbuf[12] = ETH_P_DEAN / 256;
	MySendbuf[13] = ETH_P_DEAN % 256;

	// data
	memcpy (MySendbuf + 14 , data_send, datalen);
	return datalen;
}

int main()
{
    init_platform();
    int Status = XST_SUCCESS;
    int res_hw,status;
	u32 Return_temp;
	float Return_real;

    XEmacPs *EmacPsInstancePtr = &Mac;
    print("Hello World\n\r");

    // Setup the PID instances
    status=hls_PID_init(&Hls_pid);
    if(status != XST_SUCCESS){
    	print("HLS peripheral setup failed\n\r");
    	return(-1);
    }

    //Setup the interrupt
 /*   status = setup_interrupt();
    if(status != XST_SUCCESS){
        print("Interrupt setup failed\n\r");
        return(-1);
    }
*/
    ResultAvailHls_PID = 0;

    Status = mymacinit(src_mac,EmacPsInstancePtr);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

    // Enable Global and instance interrupts
    XPid_regulator_InterruptEnable(&Hls_pid,1);
    XPid_regulator_InterruptGlobalEnable(&Hls_pid);

	while(1)
	{

		if( ResultAvailHls_PID == 1 )
		{
			ResultAvailHls_PID = 0;
			Return_temp = XPid_regulator_Get_return(&Hls_pid);
			Return_real = *((float*)&Return_temp);
			Prepare_send_packet(Return_real);

			Mac_driver_PacketSend(14+datalen, MySendbuf,EmacPsInstancePtr);		   //调用网卡发送函数
			printf("Return_real = %f\n\r",Return_real);  //如果采集到的数是0，说明有问题
		}
		else
		{
			//pid_input();
		}
		if(PtpNewPktRecd == TRUE)
		{
			PtpNewPktRecd = 0;
			unsigned int recvlen = 0;
			char unsigned *buf;
			ETH_HEADER *eth;
			DATA_HEADER *data;
			//recvlen = Mac_driver_PacketReceive(1500, MyRecvbuf, EmacPsInstancePtr);
		   //接收数据不包括数据链路帧头
			buf = MyRecvbuf;
			eth = ( ETH_HEADER *)(buf);
			analyseETH(eth);
			size_t ethlen =  14;
			if(my_protocol_flag == 1)
			{
				pid_input();
				data = (DATA_HEADER *)(buf + ethlen);
				analyseDATA(data);

			}
		}
		else{;}
	}

    cleanup_platform();
    return 0;
}

