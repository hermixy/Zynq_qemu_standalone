// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.1
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef XPID_REGULATOR_H
#define XPID_REGULATOR_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xpid_regulator_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Axilites_BaseAddress;
} XPid_regulator_Config;
#endif

typedef struct {
    u32 Axilites_BaseAddress;
    u32 IsReady;
} XPid_regulator;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XPid_regulator_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XPid_regulator_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XPid_regulator_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XPid_regulator_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XPid_regulator_Initialize(XPid_regulator *InstancePtr, u16 DeviceId);
XPid_regulator_Config* XPid_regulator_LookupConfig(u16 DeviceId);
int XPid_regulator_CfgInitialize(XPid_regulator *InstancePtr, XPid_regulator_Config *ConfigPtr);
#else
int XPid_regulator_Initialize(XPid_regulator *InstancePtr, const char* InstanceName);
int XPid_regulator_Release(XPid_regulator *InstancePtr);
#endif

void XPid_regulator_Start(XPid_regulator *InstancePtr);
u32 XPid_regulator_IsDone(XPid_regulator *InstancePtr);
u32 XPid_regulator_IsIdle(XPid_regulator *InstancePtr);
u32 XPid_regulator_IsReady(XPid_regulator *InstancePtr);
void XPid_regulator_EnableAutoRestart(XPid_regulator *InstancePtr);
void XPid_regulator_DisableAutoRestart(XPid_regulator *InstancePtr);
u32 XPid_regulator_Get_return(XPid_regulator *InstancePtr);

void XPid_regulator_Set_Ref(XPid_regulator *InstancePtr, u32 Data);
u32 XPid_regulator_Get_Ref(XPid_regulator *InstancePtr);
void XPid_regulator_Set_Fdb(XPid_regulator *InstancePtr, u32 Data);
u32 XPid_regulator_Get_Fdb(XPid_regulator *InstancePtr);

void XPid_regulator_InterruptGlobalEnable(XPid_regulator *InstancePtr);
void XPid_regulator_InterruptGlobalDisable(XPid_regulator *InstancePtr);
void XPid_regulator_InterruptEnable(XPid_regulator *InstancePtr, u32 Mask);
void XPid_regulator_InterruptDisable(XPid_regulator *InstancePtr, u32 Mask);
void XPid_regulator_InterruptClear(XPid_regulator *InstancePtr, u32 Mask);
u32 XPid_regulator_InterruptGetEnabled(XPid_regulator *InstancePtr);
u32 XPid_regulator_InterruptGetStatus(XPid_regulator *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
